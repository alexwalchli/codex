{
    "rules": {

        "nodes": {
          	"$nodeId" : {
              // 1.) Give access to read if a nodeUsers/$nodeId/$userId record exists
              ".read": "(auth != null) && root.child('node_users/' + $nodeId + '/' + auth.uid).exists()",

              // 1.) Give access to create if no node presently exists with the nodeId
              // 2.) Give access to update/delete if a nodeUsers/$nodeId/$userId record exists
              ".write": "(auth != null) && (data.val() === null || root.child('node_users/' + $nodeId+ '/' + auth.uid).exists())"
            }
        },
        "userPages": {
            "$uid": {
                // Only give access to userPages/$userId for the logged in user
                ".read": "$uid === auth.uid",
                ".write": "$uid === auth.uid"
            }
        },
        "node_users": {
            "$nodeId": {
                // 1.) Must be authorized
                // 2.) If a user created a node, give them access to add/remove nodeUsers/$nodeId/$userId
                //     (for when nodes are created, or for sharing or revoking nodes from another User)
                // 3.) If a user has a nodeUsers/$nodeId/$userId, give them access to delete(but not create or update) nodeUsers/$nodeId 
                //     (for when a node is deleted so there are no orphaned nodeUsers from nodes,
                //      but we also don't want non-creators to be able to give node access to other users)
                ".write": "(auth != null) && (root.child('nodes/' + $nodeId + '/createdById').val() === auth.uid || (newData.val() === null && root.child('nodeUsers/' + $nodeId + '/' + auth.uid).exists()))"
            }
        },
        "node_userPages_users": {
        	".read": "(auth != null)",
            ".write": "(auth != null)"
        },
        "userPage_users_nodes": {
            ".read": "(auth != null)",
            ".write": "(auth != null)"
        }
    }
}